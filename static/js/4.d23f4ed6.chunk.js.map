{"version":3,"sources":["Detail.js"],"names":["박스","styled","div","제목","h4","props","색상","TabContent","useEffect","스위치변경","누른탭","Info","재고","찾은상품","id","connect","state","console","log","reducer","useState","경고","경고변경","누른탭변경","스위치","useContext","재고context","useParams","history","useHistory","shoes","find","상품","타이머","setTimeout","clearTimeout","사이트저장값","localStorage","getItem","JSON","parse","push","Set","setItem","stringify","className","src","width","title","content","price","onClick","뉴재고","alert","재고변경","dispatch","type","payload","name","quan","variant","defaultActiveKey","Item","Link","eventKey","in","classNames","timeout"],"mappings":"4aAYA,IAAIA,EAAKC,IAAOC,IAAV,KAGFC,EAAKF,IAAOG,GAAV,KAES,SAAAC,GAAK,OAAIA,EAAMC,gBA2J5B,SAASC,EAAWF,GAMhB,OAJFG,qBAAU,WACNH,EAAMI,gCAAM,MAGI,IAAdJ,EAAMK,mBACD,6DACgB,IAAdL,EAAMK,mBACN,6DACc,IAAdL,EAAMK,mBACN,kEADJ,EAMX,SAASC,EAAKN,GACV,OACI,gDAASA,EAAMO,aAAGP,EAAMQ,yBAAKC,OAYxBC,uBAPb,SAAaC,GAEX,OADAC,QAAQC,IAAIF,GACL,CACHA,MAAQA,EAAMG,WAIPJ,EApLf,SAAgBV,GAAQ,IAAD,EAEFe,oBAAS,GAFP,mBAEdC,EAFc,KAEVC,EAFU,OAIAF,mBAAS,GAJT,mBAIdV,EAJc,KAITa,EAJS,OAKAH,oBAAS,GALT,mBAKdI,EALc,KAKTf,EALS,KAQbK,GAFIW,qBAAWC,KAERC,cAAPb,IACFc,EAAUC,cAEVhB,EAAOR,EAAMyB,MAAMC,MAAK,SAASC,GACjC,OAAOA,EAAGlB,IAAMA,KA8CpB,OA3CAN,qBAAU,WACP,IAAIyB,EAAMC,YAAW,WACjBZ,GAAK,KACL,KACH,OAAO,WAAMa,aAAaF,MAC3B,IAUHzB,qBAAU,WACN,IAAI4B,EAASC,aAAaC,QAAQ,YAK9BF,EADU,OAAXA,EACU,GAEAG,KAAKC,MAAMJ,IAIjBK,KAAK3B,GAGZsB,EAAS,IAAIM,IAAIN,GAIjBA,EAAM,YAAOA,GAEbC,aAAaM,QAAQ,UAAWJ,KAAKK,UAAUR,IAE/CnB,QAAQC,IAAIkB,KAEb,IAIC,sBAAKS,UAAU,YAAf,UACI,cAAC7C,EAAD,UACI,cAACG,EAAD,CAAI0C,UAAU,MAAd,uBASO,IAAPxB,EACG,qBAAKwB,UAAU,YAAf,SACC,8GAEF,KAEN,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKC,IAAK,6CAA6CjC,EAAKC,GAAG,GAAG,OAAQiC,MAAM,WAElF,sBAAKF,UAAU,gBAAf,UACE,oBAAIA,UAAU,OAAd,SAAsBhC,EAAKmC,QAC3B,4BAAInC,EAAKoC,UACT,8BAAIpC,EAAKqC,MAAT,YAEA,cAACvC,EAAD,CAAMC,eAAIP,EAAMO,aAAIC,2BAAMA,IAE1B,wBAAQgC,UAAU,iBAAiBM,QAAU,WAEzC,IAAIC,EAAG,YAAO/C,EAAMO,cAEpBwC,EAAIvC,EAAKC,IAAMsC,EAAIvC,EAAKC,IAAI,GAEN,IAAlBsC,EAAIvC,EAAKC,MAETsC,EAAIvC,EAAKC,MACTuC,MAAM,sDAGVhD,EAAMiD,yBAAKF,GACX/C,EAAMkD,SAAS,CAACC,KAAO,2BAAQC,QAAU,CAAC3C,GAAGD,EAAKC,GAAI4C,KAAK7C,EAAKmC,MAAOW,KAAK,KAE5E/B,EAAQa,KAAK,UAfjB,sCAkBA,wBAAQI,UAAU,iBAAiBM,QAAU,WACzCvB,EAAQa,KAAK,MADjB,4CAQJ,eAAC,IAAD,CAAKI,UAAU,YAAYe,QAAQ,OAAOC,iBAAiB,SAA3D,UACI,cAAC,IAAIC,KAAL,UACI,cAAC,IAAIC,KAAL,CAAUC,SAAS,SAASb,QAAS,WAAM1C,GAAM,GAAQc,EAAM,IAA/D,sBAEJ,cAAC,IAAIuC,KAAL,UACI,cAAC,IAAIC,KAAL,CAAUC,SAAS,SAASb,QAAS,WAAM1C,GAAM,GAAQc,EAAM,IAA/D,2BAIR,cAAC,IAAD,CAAe0C,GAAIzC,EAAK0C,WAAW,MAAMC,QAAS,IAAlD,SACI,cAAC5D,EAAD,CAAYG,qBAAKA,EAAKD,iCAAOA","file":"static/js/4.d23f4ed6.chunk.js","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Nav } from 'react-bootstrap';\r\nimport './Detail.scss';\r\n\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { 재고context } from './App.js'\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\nlet 박스 = styled.div`\r\n    padding : 20px;\r\n`;\r\nlet 제목 = styled.h4`\r\n    font-size : 25px;\r\n    color : ${ props => props.색상 }\r\n`;\r\n\r\n\r\n\r\nfunction Detail(props) {\r\n\r\n    let [경고, 경고변경] = useState(true);\r\n    // let [입력값, 입력값변경] = useState('');\r\n    let [누른탭, 누른탭변경] = useState(0);\r\n    let [스위치, 스위치변경] = useState(false);\r\n    let 재고2 = useContext(재고context);\r\n  \r\n    let { id } = useParams();\r\n    let history = useHistory();\r\n    // 상품은 shoes의 하나하나의 데이터\r\n    let 찾은상품 = props.shoes.find(function(상품){\r\n        return 상품.id == id\r\n    });\r\n    \r\n    useEffect(()=>{\r\n       let 타이머 = setTimeout(()=>{\r\n           경고변경(false);\r\n        }, 2000);\r\n        return ()=>{ clearTimeout(타이머) }\r\n    }, []);\r\n\r\n\r\n    // 최근 본 상품 UI만들기\r\n    // 1. 누가 Detail페이지 들어가면\r\n    // 2. localStorage에 있는 항목을 꺼냄\r\n    // 3. 경우가 두가지가 있겠네 null이 나오거나 [ ]가 나오거나\r\n    // 4. [ ]가 나오면 거기에 URL파라미터의 id부분을 push()함\r\n    // 5. 중복 처리하기, 팁 : 중복을 허용하지 않는 Set자료형\r\n    // 6. 그러면 [ ]를 다시 localStorage에 저장함 (따옴표쳐서)\r\n    useEffect(()=>{\r\n        let 사이트저장값 = localStorage.getItem('watched');\r\n\r\n        // 사이트를 처음 들어가면 null값 이기 때문에 push부분에서 에러가 남\r\n        // 따라서 if문을 사용하여 null일 경우 사이트저장값을 비어있는 배열로 만들어줌\r\n        if(사이트저장값 === null) {\r\n            사이트저장값 = []\r\n        } else { \r\n            사이트저장값 = JSON.parse(사이트저장값) \r\n        }\r\n\r\n        // 사이트저장값에 방문한 페이지의 URL(useParams의 값)을 push해줌\r\n        사이트저장값.push(id);\r\n        \r\n        // Set자료형은 array와 똑같은 기능인데 차이점은 중복을 자동제거해줌\r\n        사이트저장값 = new Set(사이트저장값);\r\n        \r\n        // Set자료형인 사이트저장값을 다시 배열형으로 바꿈\r\n        // [...]은 괄호를 벗겨줌\r\n        사이트저장값 = [...사이트저장값];\r\n\r\n        localStorage.setItem('watched', JSON.stringify(사이트저장값));\r\n        \r\n        console.log(사이트저장값)\r\n        \r\n    }, []);\r\n    \r\n    \r\n    return(\r\n        <div className=\"container\">\r\n            <박스>\r\n                <제목 className=\"red\">Detail</제목>\r\n                {/* <제목 색상=\"blue\">Detail</제목>\r\n                <제목 색상=\"red\">Detail</제목> */}\r\n            </박스>\r\n            \r\n            {/* { 입력값 }\r\n            <input onChange={ (e)=>{ 입력값변경(e.target.value) } } /> */}\r\n\r\n            {\r\n                경고 === true \r\n                ? (<div className=\"my-alert2\">\r\n                    <p>재고가 얼마 남지 않았습니다</p>\r\n                  </div>)\r\n                : null\r\n            }\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <img src={'https://codingapple1.github.io/shop/shoes'+(찾은상품.id+1)+'.jpg'} width=\"100%\" />\r\n              </div>\r\n              <div className=\"col-md-6 mt-4\">\r\n                <h4 className=\"pt-5\">{찾은상품.title}</h4>\r\n                <p>{찾은상품.content}</p>\r\n                <p>{찾은상품.price}원</p>\r\n\r\n                <Info 재고={props.재고} 찾은상품={찾은상품}></Info>\r\n\r\n                <button className=\"btn btn-danger\" onClick={ ()=>{\r\n                    \r\n                    let 뉴재고 = [...props.재고];\r\n\r\n                    뉴재고[찾은상품.id] = 뉴재고[찾은상품.id]-1;\r\n\r\n                    if (뉴재고[찾은상품.id] === -1) {\r\n\r\n                        뉴재고[찾은상품.id]++\r\n                        alert('매진된 상품입니다');\r\n                    }\r\n\r\n                    props.재고변경(뉴재고);\r\n                    props.dispatch({type : '항목추가', payload : {id:찾은상품.id, name:찾은상품.title, quan:1}});\r\n                    // 개발환경에서 페이지 이동시 강제로 새로고침 안되게 함, useHistory훅\r\n                    history.push('/cart');\r\n\r\n                }}>주문하기</button> \r\n                <button className=\"btn btn-danger\" onClick={ ()=>{ \r\n                    history.push('/');\r\n                 } }>뒤로가기</button> \r\n              </div>\r\n            </div>\r\n\r\n            {/* <SideTab id={id} shoes={props.shoes}></SideTab> */}\r\n\r\n            <Nav className=\"mt-5 mb-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-0\" onClick={()=>{ 스위치변경(false); 누른탭변경(0) }}>Active</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link-1\" onClick={()=>{ 스위치변경(false); 누른탭변경(1) }}>Option 2</Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n\r\n            <CSSTransition in={스위치} classNames=\"wow\" timeout={500}>\r\n                <TabContent 누른탭={누른탭} 스위치변경={스위치변경}></TabContent>\r\n            </CSSTransition>\r\n\r\n        </div>\r\n    )\r\n  }\r\n\r\n\r\n  function SideTab(props) {\r\n    let arr = localStorage.getItem('watched');\r\n    arr = JSON.parse(arr);\r\n    let 관심상품1 = arr[arr.length-1];\r\n    let 관심상품2 = arr[arr.length-2];\r\n\r\n      return (\r\n          <div className=\"SideTab\">\r\n              <p>관심목록</p>\r\n              <p>{ props.shoes[관심상품1].title }</p>\r\n              <img src={ 'https://codingapple1.github.io/shop/shoes' + 관심상품1 + '.jpg' } className=\"shoesimg\"/>\r\n              <p>{ props.shoes[관심상품2].title }</p>\r\n              <img src={ 'https://codingapple1.github.io/shop/shoes' + 관심상품2 + '.jpg' } className=\"shoesimg\"/>\r\n          </div>\r\n      )\r\n  }\r\n\r\n\r\n\r\n  function TabContent(props){\r\n\r\n    useEffect(()=>{\r\n        props.스위치변경(true);\r\n    });\r\n\r\n      if (props.누른탭 === 0) {\r\n        return <div>0번째 내용</div>\r\n      } else if (props.누른탭 === 1) {\r\n          return <div>1번째 내용</div>\r\n      } else if (props.누른탭 === 2) {\r\n          return <div>2번째 내용</div>\r\n      }\r\n    }\r\n\r\n  \r\n  function Info(props) {\r\n      return(\r\n          <p>재고 : {props.재고[props.찾은상품.id]}</p>\r\n      )\r\n  }\r\n\r\n  \r\n  function 함수명(state){\r\n    console.log(state);\r\n    return {\r\n        state : state.reducer\r\n    }\r\n}\r\n\r\nexport default connect(함수명)(Detail)\r\n\r\n\r\n// export default Detail;"],"sourceRoot":""}